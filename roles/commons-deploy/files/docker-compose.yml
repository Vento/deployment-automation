version: '3.3'
services:
#
# Infrastructure Services
#
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
        - "5672:5672"
        - "15672:15672"
    deploy:
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:4-alpine
    restart: always
    ports:
        - "6379:6379"
    deploy:
      placement:
        constraints: [node.role == manager]

  elasticsearch:
    image: vvasiloud/vento-elasticsearch:latest
    restart: always
    ports:
        - "9200:9200"
        - "9300:9300"
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - network.host=0.0.0.0
      - discovery.zen.minimum_master_nodes=1
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
  kibana:
    image: vvasiloud/vento-kibana:latest
    restart: always
    ports:
        - "5601:5601"
    environment:
      XPACK_SECURITY_ENABLED: "false"
      XPACK_MONITORING_ENABLED: "false"
      XPACK_ML_ENABLED: "false"
      XPACK_GRAPH_ENABLED: "false"
      XPACK_REPORTING_ENABLED: "false"
      XPACK_GROKDEBUGGER_ENABLED: "false"
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - elasticsearch

  logstash:
    image: vvasiloud/vento-logstash:latest
    restart: always
    environment:
      XPACK_MONITORING_ENABLED: "false"
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - elasticsearch

  logspout:
      image: bekt/logspout-logstash
      restart: always
      environment:
        ROUTE_URIS: 'logstash://logstash:5000'
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      depends_on:
        - logstash
      deploy:
        mode: global
        restart_policy:
          condition: on-failure
          delay: 30s

#
# Centralized Configuration
#
  config:
    image: vvasiloud/vento-config:latest
    restart: always
    ports:
        - "8888:8888"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
#
# Service Discovery - Eureka
#
  registry:
    image: vvasiloud/vento-registry:latest
    restart: always
    ports:
        - "8761:8761"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
#
# UAA Service
#
  auth-service:
    image: vvasiloud/vento-auth:latest
    restart: always
    ports:
        - "3000:3000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - auth-db
      - rabbitmq
#
# UAA Database Service
#
  auth-db:
    image: mongo:3.5
    restart: always
    ports:
        - "3001:27017"
    deploy:
      placement:
        constraints: [node.role == manager]
#
# Zuul Gateway / Ribbon load balancer
#
  gateway:
    image: vvasiloud/vento-gateway:latest
    restart: always
    ports:
        - "80:9000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
#
# Profile Service
#
  profile-service:
    image: vvasiloud/vento-profile:latest
    restart: always
    ports:
        - "1000:1000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - profile-db
      - rabbitmq
#
# Profile Database Service
#
  profile-db:
    image: mongo:3.5
    restart: always
    ports:
        - "1001:27017"
    deploy:
      placement:
        constraints: [node.role == manager]
#
# Match Service
#
  match-service:
    image: vvasiloud/vento-match:latest
    restart: always
    ports:
        - "2000:2000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - redis
      - rabbitmq

#
# Hystrix Monitoring
#
  monitoring:
    image: vvasiloud/vento-monitoring:latest
    restart: always
    ports:
        - "8989:8989" 
        - "8080:8080"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - rabbitmq
#
# Zipkin Tracing
#
  tracing:
    image: vvasiloud/vento-tracing:latest
    restart: always
    ports:
        - "9411:9411" 
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    depends_on:
      - rabbitmq

volumes:
  esdata1:
    driver: local